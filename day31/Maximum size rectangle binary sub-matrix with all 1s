class Solution{
  public:
  int maxHistogramArea(vector<int>& heights) {
    int maxArea = 0;
    stack<int> st;
    int n = heights.size();
    
    for (int i = 0; i < n; ++i) {
        while (!st.empty() && heights[st.top()] >= heights[i]) {
            int height = heights[st.top()];
            st.pop();
            int width = st.empty() ? i : i - st.top() - 1;
            maxArea = max(maxArea, height * width);
        }
        st.push(i);
    }
    
    while (!st.empty()) {
        int height = heights[st.top()];
        st.pop();
        int width = st.empty() ? n : n - st.top() - 1;
        maxArea = max(maxArea, height * width);
    }
    
    return maxArea;
}
  
    int maxArea(int M[MAX][MAX], int n, int m) {
     
    vector<int> heights(m, 0);
    int maxArea = 0;
    
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            
            heights[j] = (M[i][j] == 0) ? 0 : heights[j] + 1;
        }
        
        maxArea = max(maxArea, maxHistogramArea(heights));
    }
    
    return maxArea;

    }
};
