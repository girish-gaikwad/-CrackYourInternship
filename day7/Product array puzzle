#include <stdio.h>
#include <stdlib.h>

int* productExceptSelf(int* nums, int n) {
    if (n == 1) {
        int* result = (int*)malloc(sizeof(int));
        result[0] = 1;
        return result;
    }

    int* left = (int*)malloc(n * sizeof(int));
    int* right = (int*)malloc(n * sizeof(int));
    int* result = (int*)malloc(n * sizeof(int));

    // Initialize left and right arrays
    left[0] = 1;
    right[n - 1] = 1;

    // Fill the left array
    for (int i = 1; i < n; i++) {
        left[i] = nums[i - 1] * left[i - 1];
    }

    // Fill the right array
    for (int i = n - 2; i >= 0; i--) {
        right[i] = nums[i + 1] * right[i + 1];
    }

    // Construct the result array
    for (int i = 0; i < n; i++) {
        result[i] = left[i] * right[i];
    }

    // Free the auxiliary space
    free(left);
    free(right);

    return result;
}

int main() {
    int nums[] = {10, 3, 5, 6, 2};
    int n = sizeof(nums) / sizeof(nums[0]);
    int* result = productExceptSelf(nums, n);

    for (int i = 0; i < n; i++) {
        printf("%d ", result[i]);
    }
    printf("\n");

    free(result);
    return 0;
}
