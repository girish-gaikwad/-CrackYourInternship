class Solution {
public:
    vector<int> restoreArray(vector<vector<int>>& adjacentPairs) {
        int n = adjacentPairs.size() + 1;
        unordered_map<int, vector<int>> graph;
        unordered_map<int, int> degreeCount;
        for (auto& pair : adjacentPairs) {
            graph[pair[0]].push_back(pair[1]);
            graph[pair[1]].push_back(pair[0]);
            degreeCount[pair[0]]++;
            degreeCount[pair[1]]++;
        }
        int startNode;
        for (auto& [node, degree] : degreeCount) {
            if (degree == 1) {
                startNode = node;
                break;
            }
        }
        int currentNode = startNode, previousNode = INT_MIN;
        vector<int> restoredArray;
        while (restoredArray.size() < n) {
            restoredArray.push_back(currentNode);
            for (auto& nextNode : graph[currentNode]) {
                if (nextNode != previousNode) {
                    previousNode = currentNode;
                    currentNode = nextNode;
                    break;
                }
            }
        }

        return restoredArray;
    }
};
 
