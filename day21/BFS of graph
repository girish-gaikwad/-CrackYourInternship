  vector<int> bfs;             // To store the BFS traversal result
        vector<bool> visited(V, false); // To keep track of visited nodes
        queue<int> q;               // Queue to help with the BFS

        // Start BFS from node 0
        q.push(0);
        visited[0] = true;

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            bfs.push_back(node);

            // Explore all adjacent vertices
            for (int neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }

        return bfs;
